export enum ENV_KEY {
  PORT = 'PORT',
  NODE_ENV = 'NODE_ENV',
  DB_HOST = 'DB_HOST',
  DB_PORT = 'DB_PORT',
  DB_USERNAME = 'DB_USERNAME',
  DB_PASSWORD = 'DB_PASSWORD',
  DB_SCHEMA = 'DB_SCHEMA',
  DB_SYNCHRONIZE = 'DB_SYNCHRONIZE',
  REDIS_HOST = 'REDIS_HOST',
  REDIS_PORT = 'REDIS_PORT',
  REDIS_PASSWORD = 'REDIS_PASSWORD',
  REDIS_DB = 'REDIS_DB',
  KAFKA_BROKER_URL = 'KAFKA_BROKER_URL',
  KAFKA_CLIENT_ID = 'KAFKA_CLIENT_ID',
  KAFKA_CONSUMER_GROUP_ID = 'KAFKA_CONSUMER_GROUP_ID',
  KAFKA_BLOCKCHAIN_ACTION_TOPIC = 'KAFKA_BLOCKCHAIN_ACTION_TOPIC',
  KAFKA_BLOCKCHAIN_ACTION_COMPLETED_TOPIC = 'KAFKA_BLOCKCHAIN_ACTION_COMPLETED_TOPIC',
  SERVICE_NAME = 'SERVICE_NAME',
  JWT_SECRET = 'JWT_SECRET',
  JWT_ACCESS_TOKEN_EXPIRES_IN = 'JWT_ACCESS_TOKEN_EXPIRES_IN',
  JWT_REFRESH_TOKEN_EXPIRES_IN = 'JWT_REFRESH_TOKEN_EXPIRES_IN',
  // mail
  SMTP_HOST = 'SMTP_HOST',
  SMTP_PORT = 'SMTP_PORT',
  SMTP_SECURE = 'SMTP_SECURE',
  SMTP_USERNAME = 'SMTP_USERNAME',
  SMTP_PASSWORD = 'SMTP_PASSWORD',
  APP_PUBLIC_URL = 'APP_PUBLIC_URL',
}

export const INJECTION_TOKEN = {
  KAFKA_SERVICE: Symbol.for('KAFKA_SERVICE'),
  REDIS_SERVICE: Symbol.for('REDIS_SERVICE'),
};

export enum SET_CACHE_POLICY {
  KEEP_TTL,
  WITH_TTL,
  IF_EXISTS,
  IF_NOT_EXISTS,
}

export enum USER_STATUS {
  ACTIVE = 'active',
  INACTIVE = 'inactive',
  BANED = 'banned',
}

export enum ROLE_TYPE {
  ADMIN = 'admin',
  USER = 'user',
}

export enum HEADER_KEY {
  LOG_ID = 'log-id',
}

export enum APP_ACTION {
  HANDLE_EXCEPTION = 'handle-exception',
}

export enum ERR_CODE {
  INTERNAL_SERVER_ERROR = 'internal_server_error',
  BAD_REQUEST = 'bad_request',
  UNAUTHORIZED = 'unauthorized',
  NOT_FOUND = 'not_found',
  ALREADY_EXISTS = 'already_exists',
  UNPROCESSABLE_ENTITY = 'unprocessable_entity',
  INVALID_TOKEN = 'invalid_token',
  USER_ALREADY_VERIFIED = 'user_already_verified',
  TOKEN_BLACKLISTED = 'token_blacklisted',
  PERMISSION_DENIED = 'permission_denied',
  PASSWORD_NOT_MATCHED = 'password_not_matched',
  TOKEN_REVOKED = 'token_revoked',
}

export enum METADATA_KEY {
  MAX_CONCURRENCY_CALL = 'max_concurrency_call',
  RATE_LIMITING = 'rate_limiting',
}

export const DEFAULT_MAX_CONCURRENT_CALL = 1;
